<?php
	// Функции

	// count($array, 1); // Подсчет количества элементов массива, цифровой параметр указывает на количество уровней вложенности.

  // -- Базовая конструкция
	// function sayHello($arg='Guest') // Если аргумент не пришел, то берем заранее подготовленный
	// {
	// 	echo "Hello, $arg!!<br>";
  //
  // }
  //
  // sayHello('World');
  //
  // $arg = 'Man';
  // sayHello($arg);
  //
  // sayHello('John');
  // sayHello();


  // -- Области видимости
  // Для изенения глобальной переменной внутри функции
  // $GLOBALS; // Глобальный массив переменной, все созданные перменные хранятся здесь.
  // $arg = 'Mike' то же самое, что и $GLOBALS['arg'] = 'Mike';


  // function sayHello($arg='Guest', $h) // Параметры передаются через запятую
	// {
  //   $arg = (!$arg) ? 'GUEST' : $arg; // Если пришла не та переменная или ее нет, то присваиваем дефолт
	// 	echo "<h$h>Hello, $arg!!</h$h><br>";
  //   // global $arg; // Второй способ - создаем глобальную переменную и присваиваем ей имя
  //   // $arg = 'Bacja';
  // }
  //
  // $arg = 'Mike';
  // sayHello(false, 1);
  // sayHello($arg, 2);
  // sayHello($arg, 3);


  // -- Вызовы функций
  // myFunction();
  // function myFunction()
  // {
  //   echo "JOPA!";
  // }


  // -- Обращение через переменную

  // $var = "myFunction"; // Создаем переменноую со строковым значением
  // function myFunction() // Создаем функцию с таким же названием
  // {
  //   echo "1";
  // }
  //
  // $var(); // Выводим функцию через переменную


  // -- Статические переменные
  // function myFunction() // Заводим функцию
  // {
  //   $i = 0; // Объявляем счетчик
  //   static $i; // static позволяет переменной сохраняться внутри функции, при каждом новом вызове функции сохраняется предыдущий вариант обработки этой функции
  //   $i++; // Прибавляем счетчик
  //   echo $i.'<br>';
  // }
  //
  // myFunction();
  // // echo $i;
  // myFunction();
  // // echo $i;
  // myFunction();
  // // echo $i;


  // -- Возврат результата
  // $j = 0;
  // function myFunction($num) // Заводим функцию и объявляем параметр
  // {
  //   // static $i;
  //   static $i = 0;
  //   $i++;
  //
  //   global $j; // ссылка на глобальную версию переменной
  //   $j = 35;
  //
  //   echo "$i<br>";
  //   $return = $num*$num; // Заводим переменную, которая будет держать результат выполнения какой-либо операции
  //
  //   // echo "string"; // не обработает, ибо return действует, как break для циклов
  //   return $return; // return возвращает результат
  // }
  //
  // $var = myFunction(4); // присваиваем результат функции переменной
  // echo $var;
  // echo "<br>j = $j<br>";
  //
  //

  // -- Возврат массива
  // function myFunction() {
  //   return array(1, 2, 3, 4, 5);
  // }
  //
  // // print_r(myFunction());
  // echo myFunction()[1];  // Если функция возвращает нам массив, то мы обращаемся к ее элементам таким же образом, как и к простому массиву


  // -- Проверка на наличие аргументов и работа со случайным количеством элементов
  // function myFunction() {
  //   $numargs = func_num_args(); // Проверка и вывод количества аргументов
  //   echo "$numargs";
  //   echo "<br>";
  //   echo func_get_arg(1); // Получить определенный аргумент по индексу
  //   echo "<br>";
  //
  //   $args = func_get_args(); // Получить значения аргументов в формате массива
  //   var_dump($args);
  // };
  //
  // myFunction('1', 1, true); // Передаем случайное количество случайных элементов


  // -- Сохранение результате функции в форме массива в отдельные переменные через list()
  function myFunction() {
    return array(1,2,3);
  }

  list($one, $two, $three) = myFunction();
  echo $one;
?>
